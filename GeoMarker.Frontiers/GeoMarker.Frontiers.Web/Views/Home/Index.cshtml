@model MultiAddressIndexViewModel
@using GeoMarker.Frontiers.Core.Models
@using GeoMarker.Frontiers.Web.Views
@using System.Security.Claims;
@using static GeoMarker.Frontiers.Web.Models.MultiAddressIndexViewModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Multi-Address";
}
<div class="shadow-lg p-3 mb-5 bg-white rounded">
    <h3 class="text-center">GeoMarker Multi-Address</h3>
    <hr />
    @if (Model.UserRequests == null)
    {
        <div class="alert alert-danger text-center" id="no-user-id" role="alert">
            No user ID was found for this session, @Company.SupportContactInformation
        </div>
    }
    else
    {
        <form name="multiAddressForm" id="geoMarkerForm" method="post" enctype="multipart/form-data">
            <div class="row p-1">
                <div class="col-3"></div>
                <div class="col-1">
                    <label>File</label>
                </div>
                <div class="col-4">
                    <input type="file" asp-for="File" class="form-control" accept=".csv" data-filesizelimit=@Configuration["FileMetadata:MaxFileSizeInBytes"] />
                    <span asp-validation-for="File" class="text-danger" id="File-error"></span>                    
                </div>
                <div class="col-4"></div>
            </div>
            <div class="row p-1">
                <div class="col-3"></div>
                <div class="col-1">
                    <label>Type</label>
                </div>
                <div class="col-8">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="geocode" value="geocode" name="Types" checked="@(Model.Types.Contains(DeGaussRequestType.GeoCode))" disabled="@(!Model.GeoCodeApiHealthy)" onchange="handleOnTypeChange()" />
                        <label class="form-check-label" for="geocode">
                            Geocode
                            <img src="~/icons/circle-i-blue.svg" class="info-tooltip" data-tooltip-text="Adds basic geocoding columns such as latitude and longitude. <a href='https://degauss.org/geocoder/' target='_blank'>Documentation</a>" />
                        </label>&nbsp;&nbsp
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="driveTime" value="driveTime" name="Types" checked="@(Model.Types.Contains(DeGaussRequestType.DriveTime))" disabled="@(!Model.DriveTimeApiHealthy)" onchange="handleOnTypeChange()" />
                        <label class="form-check-label" for="driveTime">
                            Drive Time
                            <img src="~/icons/circle-i-blue.svg" class="info-tooltip" data-tooltip-text="Adds the drive time and distance to a specified care center. <a href='https://degauss.org/drivetime/' target='_blank'>Documentation</a>" />
                        </label>&nbsp;&nbsp
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="deprivationIndex" value="deprivationIndex" name="Types" checked="@(Model.Types.Contains(DeGaussRequestType.DeprivationIndex))" disabled="@(!Model.DeprivationIndexApiHealthy)" onchange="handleOnTypeChange()" />
                        <label class="form-check-label" for="deprivationIndex">
                            Deprivation Index
                            <img src="~/icons/circle-i-blue.svg" class="info-tooltip" data-tooltip-text="Adds six household measures and a calculated index of the measures. <a href='https://degauss.org/dep_index/' target='_blank'>Documentation</a>" />
                        </label>&nbsp;&nbsp
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="censusBlockGroup" value="censusBlockGroup" name="Types" checked="@(Model.Types.Contains(DeGaussRequestType.CensusBlockGroup))" disabled="@(!Model.CensusBlockApiHealthy)" onchange="handleOnTypeChange()" />
                        <label class="form-check-label" for="censusBlockGroup">
                            Census Block Group
                            <img src="~/icons/circle-i-blue.svg" class="info-tooltip" data-tooltip-text="Adds census block group and census tract for each address. <a href='https://degauss.org/census_block_group/' target='_blank'>Documentation</a>" />
                        </label>
                    </div>
                    <br>
                    <span asp-validation-for="Types" class="text-danger" id="Types-error"></span>
                </div>
            </div>
            <div class="row p-1">
                <div class="col-4"></div>
                <div class="col-8">
                    @{
                        var showGeocodeNote = Model.Types.Contains(DeGaussRequestType.GeoCode) || Model.Types.Count == 0 ? Html.Raw("display: none") : Html.Raw("");
                    }
                    <span style="@(showGeocodeNote)" id="note-geocoded">
                        <b>Note: The file must already be geocoded</b>
                    </span>
                </div>
            </div>
            @{
                var showSite = Model.Types.Contains(DeGaussRequestType.DriveTime) ? Html.Raw("") : Html.Raw("display: none");
            }
            <div class="row p-1" id="site-input" style="@(showSite)">
                <div class="col-3"></div>
                <div class="col-1">
                    <label>Site</label>
                </div>
                <div class="col-4">
                    @Html.DropDownListFor(model => model.Site, Model.SiteOptions, "Please Select", new {@class="form-select small", @id="site-field"})              
                    <span asp-validation-for="Site" class="text-danger" id="Site-error"></span>
                </div>
                <div class="col-4"></div>
            </div>
            @{
                var showYear = Model.Types.Contains(DeGaussRequestType.CensusBlockGroup) ? Html.Raw("") : Html.Raw("display: none");
            }
            <div class="row p-1" id="year-input" style="@(showYear)">
                <div class="col-3"></div>
                <div class="col-1">
                    <label>Year</label>
                </div>
                <div class="col-4">
                    @Html.DropDownListFor(model => model.Year, Model.YearOptions, "Please Select", new {@class="form-select small", @id="year-field"})               
                    <span asp-validation-for="Year" class="text-danger" id="Year-error"></span>
                </div>
                <div class="col-4"></div>
            </div>
            <div class="row p-1">
                <div class="col-5">
                </div>
                <div class="col-2">
                    <div id="submitDiv" style="text-align: center">
                        <button type="submit" class="btn-primary btn" id="submitGeoMarkerForm">Submit</button>
                    </div>
                    <div id="loadingDiv" style="display: none;">
                        <button class="btn btn-primary" type="button" id="loadingConnect" disabled="">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">Loading...</span>
                        </button>
                    </div>
                </div>
                <div class="col-5">
                </div>
            </div>
        </form>

        @if (!String.IsNullOrEmpty(Model.SuccessResponse))
        {
            <div class="alert alert-success alert-dismissible fade show text-center" id="result" role="alert">
                @Model.SuccessResponse
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        else if (!String.IsNullOrEmpty(Model.ErrorResponse))
        {
            <div class="alert alert-danger alert-dismissible fade show text-center" id="result" role="alert">
                @Model.ErrorResponse
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <hr />
        <style>
            th {
                text-align: center;
            }

            td {
                text-align: center;
            }
        </style>

        <h4 class="text-center">
            History
            <a href="#" id="refresh-multi-history" onclick="location.href='/?refresh=true';">
                <span class="oi oi-loop-circular"></span><br />
            </a>
        </h4>

        @await Component.InvokeAsync("HistoryTable", new {
    model = Model,
    userId = User.Identity != null && User.Identity.IsAuthenticated ? @User.Claims.First(x => x.Type == ClaimTypes.Name).Value : string.Empty
    })

        <p style="text-align: center; display: none;" id="no-history">No History</p>
    }
</div>
@section Scripts
{  
    <script>
        handleOnTypeChange = function() {
            var noTypesSelected = !$('input[name="Types"]').toArray().some(i => i.checked)
            if (noTypesSelected)
                $("#Types-error").show()
            else
                $("#Types-error").hide()

            if ($("#geocode").prop("checked") || noTypesSelected)
                $("#note-geocoded").hide()
            else
                $("#note-geocoded").show()

            if ($("#driveTime").prop("checked"))
                $("#site-input").show()
            else {
                $("#site-field").val("")
                $("#site-input").hide()
            }

            if ($("#censusBlockGroup").prop("checked"))
                $("#year-input").show()
            else {
                $("#year-field").val("");
                $("#year-input").hide()
            }
        }

        $("#site-field").on("change", function()
        {
            if ($(this).val() == "")
            {
                $("#Site-error").show();
                $("#Site-error").text("Site is required.");
            }
            else
                $("#Site-error").hide()
        });

        $("#year-field").on("change", function () {
            if ($(this).val() == "")
            {
                $("#Year-error").show();
                $("#Year-error").text("Year is required.");
            }
            else
                $("#Year-error").hide()
        });

        $(document).ready(function () {
            if ($(".history-data").length == 0) {
                $("#multiAddressHistory").hide();
                $("#no-history").show();
            }
        });

        $("#logout-form").on('submit', function () {
            $("#File-error").hide();
        });

        $("#File").on("change", function (e)
        {
            var defaultFileSizeInBytes = 25000000;
            var files = e.currentTarget.files;
            var fileName = files[0].name;
            var dotIndex = fileName.lastIndexOf('.');
            var fileNameWithoutExtension = fileName.substr(0, dotIndex);
            var fileSizeInBytes = parseInt($("#File").data("filesizelimit"));

            if (isNaN(fileSizeInBytes))
                fileSizeInBytes = defaultFileSizeInBytes;

            if (fileNameWithoutExtension.search(/^[a-zA-Z0-9-_]+$/) === -1) 
            {
                $("#File-error").show();
                $("#File-error").text("Invalid file name. File name should not include space or any special characters.");          
            }
            else if (files[0].size > fileSizeInBytes) 
            {
                $("#File-error").show();
                $("#File-error").text("File size cannot be more than " + Math.ceil((fileSizeInBytes / 1024) / 1024) + " MB.");
            }
            else
                $("#File-error").hide();
         });
        $("#geoMarkerForm").on("submit", function ()
        {
            var validationFailed = false;
            var defaultFileSizeInBytes = 25000000;
            var files = $("input:file").prop("files");

            if (files.length === 0) 
            {
                $("#File-error").show();
                $("#File-error").text("File is required.");
                validationFailed = true;
            }
            else
            {
                var fileName = files[0].name;

                var dotIndex = fileName.lastIndexOf('.');

                var fileNameWithoutExtension = fileName.substr(0, dotIndex);
                var fileSizeInBytes = parseInt($("#File").data("filesizelimit"));

                if (isNaN(fileSizeInBytes))
                    fileSizeInBytes = defaultFileSizeInBytes;

                if (fileNameWithoutExtension.search(/^[a-zA-Z0-9-_]+$/) === -1 || files[0].size > fileSizeInBytes)
                   validationFailed = true;
            }

            if (!$('input[name="Types"]').toArray().some(i => i.checked))
            {
                $("#Types-error").show();
                $("#Types-error").text("At least one Type is required.");
                validationFailed = true;
            }

            if ($("#driveTime").prop("checked") && $("#site-field").val() == ""){
                $("#Site-error").show();
                $("#Site-error").text("Site is required.");
                validationFailed = true;
            }

            if ($("#censusBlockGroup").prop("checked") && $("#year-field").val() == "") {
                $("#Year-error").show();
                $("#Year-error").text("Year is required.");
                validationFailed = true;
            }

            if (validationFailed)
                return false;

            $("#File-error").hide();
            $("#Types-error").hide();
            $("#Site-error").hide();
            $("#Year-error").hide();
            $("#submitDiv").hide();
            $("#loadingDiv").show();
        });
    </script>
}