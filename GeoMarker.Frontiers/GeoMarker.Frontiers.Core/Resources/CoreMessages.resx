<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandSerivce.Process.StartFailure" xml:space="preserve">
    <value>The process has failed to start. CommandGuid: {0}</value>
  </data>
  <data name="CommandService.Failure" xml:space="preserve">
    <value>The {0} command has failed.</value>
  </data>
  <data name="CommandService.FileNotFound" xml:space="preserve">
    <value>The file to be deleted was not found.</value>
  </data>
  <data name="CommandService.Process.NoTask" xml:space="preserve">
    <value>No task result was found. CommandGuid: {0}</value>
  </data>
  <data name="CommandService.Rejected" xml:space="preserve">
    <value>The {0} command was rejected. No process has been created. </value>
  </data>
  <data name="CommandService.StdErr" xml:space="preserve">
    <value>Standard Error: {0}</value>
  </data>
  <data name="CommandService.StdOut" xml:space="preserve">
    <value>Standard Out: {0}</value>
  </data>
  <data name="CommandService.TaskInfo" xml:space="preserve">
    <value>CommandGuid: {0}, Command: {1}</value>
  </data>
  <data name="Controller.CommandFailure" xml:space="preserve">
    <value>A failure has occurred attempting to execute the underlying command: {0}</value>
  </data>
  <data name="Controller.Failure" xml:space="preserve">
    <value>An unexpected error has occurred while processing {0}. </value>
  </data>
  <data name="Controller.CommandRejected" xml:space="preserve">
    <value>The command was rejected in {0}.</value>
  </data>
  <data name="Controller.NullStream" xml:space="preserve">
    <value>The {0} process completed successfully, but the result was null.</value>
  </data>
  <data name="FileCleanupJob.ConfigurationError" xml:space="preserve">
    <value>File cleanup job configuration error. {0}</value>
  </data>
  <data name="FileCleanupJob.NoWorkingDirectory" xml:space="preserve">
    <value>File output working directory does not exist. </value>
  </data>
  <data name="FileCleanupJob.RequestDirectoriesFound" xml:space="preserve">
    <value>{0} total request directories found.</value>
  </data>
  <data name="FileCleanupJob.RequestOverCutoff" xml:space="preserve">
    <value>{0} - Request is older than {1} days. Removing.</value>
  </data>
  <data name="FileCleanupJob.RequestUnderCutoff" xml:space="preserve">
    <value>{0} - Request is younger than {1} days. </value>
  </data>
  <data name="FileCleanupJob.Starting" xml:space="preserve">
    <value>Starting file cleanup job. {0}</value>
  </data>
  <data name="UiController.LoadFailureMessage" xml:space="preserve">
    <value>Please refresh and contact support if this issue persists</value>
  </data>
  <data name="ValidatorController.FileBlankRowsMessage" xml:space="preserve">
    <value>The file must not contain any blank rows.</value>
  </data>
  <data name="ValidatorController.FileDuplicateHeadersMessage" xml:space="preserve">
    <value>The file must not contain duplicate header columns.</value>
  </data>
  <data name="ValidatorController.FileEmptyMessage" xml:space="preserve">
    <value>The file must not be empty.</value>
  </data>
  <data name="ValidatorController.FileExceedsRowCountMessage" xml:space="preserve">
    <value>The file must not exceed {0} rows.</value>
  </data>
  <data name="ValidatorController.FileExceedsSize" xml:space="preserve">
    <value>File size cannot be more than {0}</value>
  </data>
  <data name="ValidatorController.FileIncorrectContentTypeMessage" xml:space="preserve">
    <value>The file has the incorrect content type. Expecting: {0}</value>
  </data>
  <data name="ValidatorController.FileIncorrectSchemaGeocodedMessage" xml:space="preserve">
    <value>The file must contain the headers 'lat' and 'lon'.</value>
  </data>
  <data name="ValidatorController.FileCannotHaveGeocodedColumns" xml:space="preserve">
    <value>The file must NOT contain the headers 'lat', 'lon', 'score', or 'precision'.</value>
  </data>
  <data name="ValidatorController.FileNeedsGeocodeColumns" xml:space="preserve">
    <value>The file must contain the headers 'ID' (case insensitive) and 'address' (case sensitive).</value>
  </data>
  <data name="ValidatorController.FileNullMessage" xml:space="preserve">
    <value>The file must not be null.</value>
  </data>
  <data name="ValidatorController.JsonAddressEmptyMessage" xml:space="preserve">
    <value>At least one address must be present.</value>
  </data>
  <data name="ValidatorController.GeocodedJsonLatEmptyMessage" xml:space="preserve">
    <value>The lat must not be empty.</value>
  </data>
  <data name="ValidatorController.GeocodedJsonLonEmptyMessage" xml:space="preserve">
    <value>The lon must not be empty.</value>
  </data>
  <data name="ValidatorController.JsonExceedsAddressCountMessage" xml:space="preserve">
    <value>The request cannot exceed {0} addresses.</value>
  </data>
  <data name="ValidatorController.JsonIncorrectFormatMessage" xml:space="preserve">
    <value>The JSON body is not in the correct format. Please use the format: {0}</value>
  </data>
  <data name="ValidatorController.NoAddressesGeocoded" xml:space="preserve">
    <value>None of the addresses were able to be geocoded, all subsequent services have been cancelled. Please double check the address format and try again</value>
  </data>
  <data name="JsonLatLonFormat" xml:space="preserve">
    <value>{{"records": [{{"lat":"0.00", "lon":"0.00"}},{{"lat":"0.00", "lon":"0.00"}}]{0}}}</value>
  </data>
  <data name="JsonAddressFormat" xml:space="preserve">
    <value>{"addresses": [{"id": "1", "address": "123 St"}, {"id": "2", "address": "987 Road"}]}</value>
  </data>
  <data name="JsonCompositeFormat" xml:space="preserve">
    <value>{"addresses": [{"id": "1", "address": "123 St"}, {"id": "2", "address": "987 Road"}], "services": ["service1", "service2], "site":"site", "year":2020}</value>
  </data>
  <data name="ValidatorController.UnableToDeserializeMessage" xml:space="preserve">
    <value>Unable to deserialize the JSON request</value>
  </data>
  <data name="ValidatorController.SiteEmptyMessage" xml:space="preserve">
    <value>The site must not be empty.</value>
  </data>
  <data name="ValidatorController.SiteInvalidMessage" xml:space="preserve">
    <value>The site must be one of: {0}</value>
  </data>
  <data name="ValidatorController.SiteNullMessage" xml:space="preserve">
    <value>The site must not be null.</value>
  </data>
  <data name="ValidatorController.ValidateFileName" xml:space="preserve">
    <value>File name must not include spaces or special characters.</value>
  </data>
  <data name="ValidatorController.ReservedFileName" xml:space="preserve">
    <value>File name must NOT include '{0}' for the {1} service.</value>
  </data>
	 
  <data name="ValidatorController.YearInvalidMessage" xml:space="preserve">
    <value>The year must be one of: {0}</value>
  </data>
  <data name="ValidatorController.YearNullMessage" xml:space="preserve">
    <value>The year must not be null.</value>
  </data>
</root>